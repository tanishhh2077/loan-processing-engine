# Use an official Python runtime as a parent image.
# bullseye is chosen as it's a stable Debian release.
FROM python:3.10-slim-bullseye

# Install system dependencies.
# - ca-certificates, curl, gnupg: for adding Docker's apt repository securely.
# - libgl1: a dependency for matplotlib's backend for rendering images.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg \
        libgl1 && \
    rm -rf /var/lib/apt/lists/*

# Add Docker's official GPG key and set up the repository.
# This is required to install the Docker CLI client from Docker's official sources.
RUN install -m 0755 -d /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc && \
    chmod a+r /etc/apt/keyrings/docker.asc && \
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
      $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install the Docker CLI.
RUN apt-get update && \
    apt-get install -y --no-install-recommends docker-ce-cli && \
    rm -rf /var/lib/apt/lists/*

# Install required Python packages.
# --no-cache-dir is used to reduce image size.
RUN pip install --no-cache-dir matplotlib pandas

# Set the working directory for the application.
WORKDIR /app

# Copy the application script into the container.
COPY performance_analyzer.py .

# Specify the command to run on container startup.
CMD ["python3", "performance_analyzer.py"]
